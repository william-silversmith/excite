#!/usr/local/bin/python2.7

import sys
import os
import getopt
import Excite

def usage():
    print """excite [--citestyle=s] [--bibstyle=s] [--citationfirst | --referencefirst] infile [outfile]

Process LaTeX style citations in a word processing document and output them in a seperate file.

By default if the infile is name.ext then the outfile is name.out.extension.

-c, --citestyle: one of: square-brace (default)
-b, --bibstyle: one of: digit-dot (default)

--citationfirst: (default) Reference numbers are ordered by the first occurance of a citation.
--referencefirst: Reference numbers are ordered by their order of appearence in the bibliography

Supported Programs:
    Apple iWork Pages'09

Annotating the file:
    \cite{some_label} - goes anywhere in the body of the document to represent a citation.
        e.g. "Love is dead." \cite{grandpa} => "Love is dead." [1]

    \\bibitem{same_label} - Usually located at the end of an article. These are the actual
        references. The label should match a citation's (case sensitive).

        e.g. \\bibitem{grandpa} Grandpa Jones. Interview on Dec. 20, 2012 at his house.
            => 1. Grandpa Jones. Interview on Dec. 20, 2012 at his house."""
    sys.exit()

try:
    opts, args = getopt.getopt(sys.argv[1:], "hc:b:", ["help", "citestyle=", "bibstyle=", 'citationfirst', 'referencefirst'])
except getopt.GetoptError as err:
    print str(err) # will print something like "option -a not recognized"
    usage()
    sys.exit(2)

citestyle = 'square-brace'
bibstyle = 'digit-dot'
orderby = 'citation-first'

for flag, value in opts:
    if flag in ('--help', '-h'):
        usage()
    elif flag in ('--citestyle', '-c'):
        citestyle = value
    elif flag in ('--bibstyle', '-b'):
        bibstyle = value
    elif flag in ('--citationfirst'):
        orderby = 'citation-first'
    elif flag in ('--referencefirst'):
        orderby = 'reference-first'

if len(args) < 1:
    print "You must provide an input file."
    sys.exit()

infile = args[0]

if len(args) > 1:
    outfile = args[1]
else:
    outfile = infile.replace('.pages', '.out.pages')

document = Excite.WordProcessingDocument(infile)

if infile.endswith('.pages'):
    document = Excite.ApplePages(infile)

document.ProcessCitations(citestyle=citestyle, bibstyle=bibstyle, orderby=orderby)
document.Materialize(outfile)

print "Output to: " + outfile
print "done."